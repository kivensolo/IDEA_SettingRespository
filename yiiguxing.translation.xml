<application>
  <component name="AppStorage">
    <histories>
      <item value="the amount of date or time to be added to the field." />
      <item value="subtract" />
      <item value="Updates the CRC-32 checksum with the specified byte (the low * eight bits of the argument b)." />
      <item value="checksum" />
      <item value="class that can be used to compute the CRC-32 of a data stream. * * &lt;p&gt; Passing a {@code null} argument to a method in this class will cause * a {@link NullPointerException} to be thrown." />
      <item value="intern" />
      <item value="Returns a canonical representation for the string object. * &lt;p&gt; * A pool of strings, initially empty, is maintained privately by the * class {@code String}. * &lt;p&gt; * When the intern method is invoked, if the pool already contains a * string equal to this {@code String} object as determined by * the {@link #equals(Object)} method, then the string from the pool is * returned. Otherwise, this {@code String} object is added to the * pool and a reference to this {@code String} object is returned. * &lt;p&gt; * It follows that for any two strings {@code s} and {@code t}, * {@code s.intern() == t.intern()} is {@code true} * if and only if {@code s.equals(t)} is {@code true}. * &lt;p&gt; * All literal strings and string-valued constant expressions are * interned. String literals are defined in section 3.10.5 of the * &lt;cite&gt;The Java&amp;trade; Language Specification&lt;/cite&gt;. * * @return a string that has the same contents as this string, but is * guaranteed to be from a pool of unique strings." />
      <item value="Returns" />
      <item value="representation" />
      <item value="Enlarg" />
      <item value="predicates" />
      <item value="Returns a list containing the results of applying the given [transform] function * to each element in the original collection." />
      <item value="eager vs lazy evaluation" />
      <item value="Extensions on collections are inlined" />
      <item value="Reified generics" />
      <item value="compiler substitutes a body of the function instead of calling it" />
      <item value="predicate" />
      <item value="satisfies" />
      <item value="Returns `this` value if it satisfies the given [predicate] or `null`, if it doesn't." />
      <item value="returns the receiver object if it satisfies the given predicate, otherwise returns null" />
      <item value="nested" />
      <item value="嵌套类" />
      <item value="Suppress" />
      <item value="Use 'java' property to get Java class corresponding to this Kotlin class or cast this instance to Any if you really want to get the runtime Java class of this implementation of KClass." />
      <item value="Specifies that this function should not be called directly without inlining" />
      <item value="actual inline" />
      <item value="actual" />
      <item value="The type with only one value: the `Unit` object. This type corresponds to the `void` type in Java." />
      <item value="Returns a Java [Class] instance corresponding to the given [KClass] instance." />
      <item value="offer" />
      <item value="positive integer" />
      <item value="or greater than the specified object" />
      <item value="a negative integer, zero, or a positive integer as this object * is less than, equal to, or greater than the specified object. *" />
      <item value="or a value greater * than zero if this abstract pathname is lexicographically * greater than the argument" />
      <item value="point" />
      <item value="Derived" />
      <item value="Represents a property, such as a named `val` or `var` declaration. * Instances of this class are obtainable by the `::` operator. * * See the [Kotlin language documentation](https://kotlinlang.org/docs/reference/reflection.html) * for more information." />
      <item value="External Functionality" />
      <item value="directive" />
      <item value="Package directive doesn't match file location less... (Ctrl+F1) Inspection info: This inspection reports file's package directive not matching the location of the file" />
      <item value="implement code to store" />
      <item value="Employee" />
      <item value="Stored Entity" />
      <item value="Add the marker annotation to make impossible using &quot;item&quot; inside another &quot;item&quot;." />
      <item value="Another bonus" />
      <item value="bonus" />
      <item value="bonus: use the 'apply' function" />
      <item value="Another bonus (Kotlin 1.1 feature). // Add the marker annotation to make impossible using &quot;item&quot; inside another &quot;item&quot;. // The code below shouldn't compile. // See _3HtmlBuilders/html.kt for the example if necessary." />
      <item value="Create new menu item, initialize it and add it to the 'items' list" />
      <item value="breakfast" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="124" />
        <entry key="ENGLISH" value="345" />
        <entry key="TURKISH" value="1" />
        <entry key="HINDI" value="3" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="autoPlayTTS" value="true" />
    <option name="googleTranslateSettings">
      <google-translate>
        <option name="useTranslateGoogleCom" value="true" />
      </google-translate>
    </option>
    <option name="ignoreRegExp" value="" />
    <option name="targetLanguageSelection" value="PRIMARY_LANGUAGE" />
    <option name="translator" value="ai.youdao" />
    <option name="ttsSource" value="TRANSLATION" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="6953e2b0635b37a0" />
        <option name="primaryLanguage" value="CHINESE" />
      </youdao-translate>
    </option>
  </component>
</application>
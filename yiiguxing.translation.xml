<application>
  <component name="Translation.Cache">
    <option name="lastTrimTime" value="1733795068074" />
  </component>
  <component name="Translation.Settings">
    <option name="primaryLanguage" value="AUTO" />
    <option name="translator" value="YOUDAO" />
    <option name="wordbookStoragePath" value="C:\Users\ZekeWang\OneDrive\TranslationPlugin" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="6953e2b0635b37a0" />
      </youdao-translate>
    </option>
  </component>
  <component name="Translation.States">
    <option name="pinTranslationDialog" value="true" />
    <histories>
      <item value="simple property" />
      <item value="Variants" />
      <item value="{@link PsiElement} andor {@link com.intellij.codeInsight.lookup.LookupElement} instances representing all identifiers that are visible at the location of the reference" />
      <item value="the array of available identifiers" />
      <item value="visible identifiers" />
      <item value="(The list of visible identifiers may not be filtered by the completion prefix string - the filtering is performed later by the IDE.)" />
      <item value="the returned array are used to build the lookup list for basic code completion" />
      <item value="The contents of the returned array are used to build the lookup list for basic code completion." />
      <item value="Returns the array of String, {@link PsiElement} andor {@link com.intellij.codeInsight.lookup.LookupElement} instances representing all identifiers that are visible at the location of the reference. The contents of the returned array are used to build the lookup list for basic code completion. (The list of visible identifiers may not be filtered by the completion prefix string - the filtering is performed later by the IDE.) &lt;p&gt; This method is default since 2018.3." />
      <item value="Inherit this interface if you want the reference to resolve to more than one element, or if you want to provide resolve result(s) for a superset of valid resolve cases." />
      <item value="Inherit this interface if you want the reference to resolve to more than one element, or if you want to provide resolve result(s) for a superset of valid resolve cases. For example, in Java, references in a static context are resolved to non-static methods in case there is no valid candidate. isValidResult() in this case should return false for later analysis by highlighting pass." />
      <item value="if true, the code in the context of which the reference is being resolved is considered incomplete, and the method may return additional invalid results." />
      <item value="Returns the results of resolving the reference." />
      <item value="Literal" />
      <item value="Scheme" />
      <item value="patterns" />
      <item value="Factory for {@link String}, {@link Character} and {@link Object}-based patterns. Provides methods for composing patterns with e.g. logical operations." />
      <item value="Pattern" />
      <item value="Factory for {@link PsiElement}, {@link PomTarget}, {@link IElementType} and {@link VirtualFile}-based patterns." />
      <item value="reference place description" />
      <item value="reference place description. See {@link com.intellij.patterns.StandardPatterns}, {@link com.intellij.patterns.PlatformPatterns} and their extenders." />
      <item value="Contributor" />
      <item value="Returns the element which is the target of the reference." />
      <item value="psi reference" />
      <item value="Provider" />
      <item value="Represents a specific instance of facet" />
      <item value="instrument code" />
      <item value="psi java token" />
      <item value="Represents a Java identifier." />
      <item value="There is insufficient memory for the Java Runtime Environment to continue." />
      <item value="return containingFiles.stream() .map {virtualFile: VirtualFile -&gt; PsiManager.getInstance(project).findFile(virtualFile) } .flatMap { psiFile: PsiFile? -&gt; PsiTreeUtil.findChildrenOfType(psiFile, PsiMethod::class.java ).stream() } .filter { method: PsiMethod -&gt; methodName == method.name } .collect(Collectors.toList())" />
      <item value="Creates a PSI element for the specified AST node. The AST tree is a simple, semantic-free tree of AST nodes which is built during the PsiBuilder parsing pass. The PSI tree is built over the AST tree and includes elements of different types for different language constructs." />
      <item value="DOUBLE QUOTED STRING" />
      <item value="STRING LITERAL" />
      <item value="get comment tokens" />
      <item value="has permissive strings" />
      <item value="completion contributor" />
      <item value="CURLY" />
      <item value="L CURLY" />
      <item value="We only care about properties at the root level having the form of &quot;property&quot; : &quot;value&quot;." />
      <item value="json schema file values index" />
      <item value="Lexer" />
      <item value="layout file raw text" />
      <item value="Simplifies API and ensures that data key will always be equal to virtual file id" />
      <item value="Represents {@link DataIndexer} which behaviour can be extended by some kind of extension points. &lt;p&gt; See {@link com.intellij.psi.impl.cache.impl.id.IdIndex}, {@link com.intellij.psi.stubs.StubUpdatingIndex} as examples. &lt;p&gt;" />
      <item value="single entry indexer" />
      <item value="Implement this interface to map input (such as a file) to a {@code Map&lt;Key, Value&gt;}, which will be associated with this input by the {@link InvertedIndex index}." />
      <item value="Source code recreated from a .class file by IntelliJ IDEA (powered by FernFlower decompiler) package com.intellij.util.io; import java.io.DataInput; import java.io.DataOutput; import java.io.IOException; import org.jetbrains.annotations.NotNull; public interface DataExternalizer&lt;T&gt; { void save(@NotNull DataOutput var1, T var2) throws IOException; T read(@NotNull DataInput var1) throws IOException; }" />
      <item value="Externalizer" />
      <item value="compute value" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="AFRIKAANS" value="5" />
        <entry key="CATALAN" value="1" />
        <entry key="CHINESE" value="773" />
        <entry key="DANISH" value="1" />
        <entry key="ENGLISH" value="730" />
        <entry key="FINNISH" value="2" />
        <entry key="FRENCH" value="3" />
        <entry key="HINDI" value="1" />
        <entry key="ICELANDIC" value="2" />
        <entry key="INDONESIAN" value="6" />
        <entry key="ITALIAN" value="1" />
        <entry key="LATIN" value="3" />
        <entry key="NORWEGIAN" value="3" />
        <entry key="POLISH" value="2" />
        <entry key="SUNDANESE" value="2" />
        <entry key="SWEDISH" value="5" />
        <entry key="TURKISH" value="1" />
        <entry key="UZBEK" value="6" />
        <entry key="WELSH" value="1" />
      </map>
    </option>
  </component>
  <component name="Translation.YoudaoSettings">
    <option name="DOMAIN" value="COMPUTERS" />
  </component>
</application>
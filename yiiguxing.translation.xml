<application>
  <component name="Translation.Cache">
    <option name="lastTrimTime" value="1692152346556" />
  </component>
  <component name="Translation.Settings">
    <option name="primaryLanguage" value="AUTO" />
    <option name="translator" value="YOUDAO" />
    <option name="wordbookStoragePath" value="C:\Users\ZekeWang\OneDrive\TranslationPlugin" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="6953e2b0635b37a0" />
      </youdao-translate>
    </option>
  </component>
  <component name="Translation.States">
    <option name="newTranslationDialogWidth" value="592" />
    <option name="newTranslationDialogX" value="2711" />
    <option name="newTranslationDialogY" value="456" />
    <histories>
      <item value="A problem occurred configuring root project" />
      <item value="get Presentable Name" />
      <item value="to Shorten FQ Names" />
      <item value="the quick brown fox&quot;" />
      <item value="if any is available" />
      <item value="Retrieve the text from the macro or selection" />
      <item value="Retrieve the text from the macro or selection, if any is available." />
      <item value="by typing the `{&lt;TAB&gt;`, the following template will be inserted: `[TEXT](LINK)END`" />
      <item value="New link reference" />
      <item value="Might want to be less restrictive in future" />
      <item value="is Acceptable In Context" />
      <item value="Capitalize the start of every word" />
      <item value="A macro which can be used in live templates." />
      <item value="calculate Result" />
      <item value="uphold" />
      <item value="Strictly to uphold contract for constructors in base class." />
      <item value="Presentable" />
      <item value="Presentable Name" />
      <item value="Macro" />
      <item value="Title Case Macro" />
      <item value="Template Context Type" />
      <item value="Macro Base" />
      <item value="Convert to title case - retrieves the text from the macro or selection, if available" />
      <item value="Note that {@code PsiFile} passed to handler's methods isn't guaranteed to be in sync with the document at the time of invocation (due to performance considerations). {@link com.intellij.psi.PsiDocumentManagercommitDocument(Document)} should be invoked explicitly, if an up-to-date PSI is required." />
      <item value="Handler, extending IDE behaviour on typing in editor." />
      <item value="Called after the specified character typed by the user has been inserted in the editor." />
      <item value="Extension points defined by the plugin" />
      <item value="Make the document change in the context of a write action." />
      <item value="This is a custom {@link TypedHandlerDelegate} that handles actions activated keystrokes in the editor. The execute method inserts a fixed string at Offset 0 of the document. Document changes are made in the context of a write action." />
      <item value="May support several carets existing simultaneously in a document. {@link supportsMultipleCarets()} method can be used to find out whether particular instance of CaretModel does it. If it does, query and update methods for caret position operate on a certain 'primary' caret." />
      <item value="If it does, query and update methods for caret position operate on a certain 'primary' caret." />
      <item value="How 'primary' caret is determined by the model is not defined (currently it's the most recently added caret, but that can change)." />
      <item value="Update methods, {@link runBatchCaretOperation(Runnable)} and {@link runForEachCaret(CaretAction)} methods should only be run from EDT. Query methods can be run from any thread, when called not from EDT, those methods are 'not aware' of 'runForEachCaret' scope - they will always return information about primary caret." />
      <item value="run Batch Caret Operation" />
      <item value="At all times at least one caret will exist in a document." />
      <item value="May support several carets existing simultaneously in a document." />
      <item value="May support several carets existing simultaneously in a document. {@link supportsMultipleCarets()} method can be used to find out whether particular instance of CaretModel does it. If it does, query and update methods for caret position operate on a certain 'primary' caret. There exists a way to perform the same operation(s) on each caret - see {@link runForEachCaret(CaretAction)} method. Within its context, query and update methods operate on the current caret in that iteration. This behaviour can change in future though, so using caret and selection query and update methods in actions that need to operate on multiple carets is discouraged - methods on {@link Caret} instances obtained via {@link getAllCarets()} or {@link runForEachCaret(CaretAction)} should be used instead. &lt;p&gt; How 'primary' caret is determined by the model is not defined (currently it's the most recently added caret, but that can change). &lt;p&gt; At all times at least one caret will exist in a document. &lt;p&gt; Update methods, {@link runBatchCaretOperation(Runnable)} and {@link runForEachCaret(CaretAction)} methods should only be run from EDT. Query methods can be run from any thread, when called not from EDT, those methods are 'not aware' of 'runForEachCaret' scope - they will always return information about primary caret." />
      <item value="Provides services for moving the caret and retrieving information about caret position." />
      <item value="caret" />
      <item value="caret model" />
      <item value="Returns the caret model for the document, which can be used to add and remove carets to the editor, as well as to query and update carets' and corresponding selections' positions." />
      <item value="Caret Model" />
      <item value="If conditions support it, makes a menu visible to display information about the caret." />
      <item value="Could not resolve org.jetbrains.intellij.plugins:gradle-intellij-plugin:1.13.3." />
      <item value="Module Version Resolve Exception" />
      <item value="Incompatible because this component declares documentation and the consumer needed a library" />
      <item value="Incompatible because this component declares a component, compatible with Java 11 and the consumer needed a component, compatible with Java 8" />
      <item value="Editor Add Caret" />
      <item value="Editor Add Care" />
      <item value="Illustration" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="AFRIKAANS" value="1" />
        <entry key="CHINESE" value="351" />
        <entry key="DANISH" value="1" />
        <entry key="ENGLISH" value="333" />
        <entry key="FRENCH" value="1" />
        <entry key="HINDI" value="1" />
        <entry key="INDONESIAN" value="5" />
        <entry key="ITALIAN" value="1" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="POLISH" value="2" />
        <entry key="SUNDANESE" value="1" />
        <entry key="SWEDISH" value="4" />
        <entry key="TURKISH" value="1" />
      </map>
    </option>
  </component>
  <component name="Translation.YoudaoSettings">
    <option name="DOMAIN" value="COMPUTERS" />
  </component>
</application>
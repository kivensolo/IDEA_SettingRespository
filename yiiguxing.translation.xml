<application>
  <component name="Translation.Cache">
    <option name="lastTrimTime" value="1734313462863" />
  </component>
  <component name="Translation.Settings">
    <option name="primaryLanguage" value="AUTO" />
    <option name="translator" value="YOUDAO" />
    <option name="wordbookStoragePath" value="C:\Users\ZekeWang\OneDrive\TranslationPlugin" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="6953e2b0635b37a0" />
      </youdao-translate>
    </option>
  </component>
  <component name="Translation.States">
    <option name="pinTranslationDialog" value="true" />
    <histories>
      <item value="Returns the initializer for the variable." />
      <item value="Searches the project for the package with the specified full-qualified name and returns one if it is found." />
      <item value="incomplete code" />
      <item value="psi poly variant reference base" />
      <item value="literal assets URI reference provider" />
      <item value="delimited list converter" />
      <item value="is text block" />
      <item value="Java literal expression." />
      <item value="Customize icons for {@link PsiElement}s." />
      <item value="LITERAL EXPRESSION" />
      <item value="java literal expression element type" />
      <item value="Quote" />
      <item value="REGULAR STRING PART" />
      <item value="CHARACTER LITERAL" />
      <item value="jvm expression reference provider" />
      <item value="Expression" />
      <item value="Represents a Java literal expression." />
      <item value="strategy" />
      <item value="the name of the highlighting level." />
      <item value="WARNINGS ATTRIBUTES" />
      <item value="GENERIC SERVER ERROR OR WARNING" />
      <item value="ERRORS ATTRIBUTES" />
      <item value="WRONG REFERENCES ATTRIBUTES" />
      <item value="A type of item with a distinct highlighting in an editor or in other views" />
      <item value="A type of item with a distinct highlighting in an editor or in other views. Use one of {@link createTextAttributesKey(String)} {@link createTextAttributesKey(String, TextAttributesKey)} to create a new key, fallbacks will help to find colors in all colors schemes. Specifying different attributes for different color schemes is possible using additionalTextAttributes extension point." />
      <item value="VISIBLE IF FOLDED" />
      <item value="highlight severity" />
      <item value="is present" />
      <item value="Present" />
      <item value="analyse" />
      <item value="is same description" />
      <item value="过滤器" />
      <item value="过滤" />
      <item value="Filte" />
      <item value="Severity" />
      <item value="Standard severity levels." />
      <item value="策略" />
      <item value="Defines a highlighting severity level for an annotation." />
      <item value="Filter" />
      <item value="Return true in this case if you'd like to switch this kind of highlighting in ANY file" />
      <item value="compute if absent" />
      <item value="text attributes key" />
      <item value="A wrapper around map, allowing to put and get values by keys in a type-safe way. Used in various extension implementations to manage temporary state. For example:" />
      <item value="allowing to put and get values by keys in a type-safe way" />
      <item value="Simple processing context can contain a shared processing context inside, which should be used when iterating over several patterns or extensions, possibly from different plugins. They may still wish to reuse some cached information that a previous extension has already calculated. &lt;p&gt;" />
      <item value="A wrapper around map, allowing to put and get values by keys in a type-safe way. Used in various extension implementations to manage temporary state. For example: &lt;ul&gt; &lt;li&gt;When creating {@code ElementPattern}, processing context may be used to cache some intermediate data to be shared between pattern parts.&lt;li&gt; &lt;li&gt;Some extensions (e.g, {@code PsiReferenceProvider}, {@code CompletionContributors}) use per-pattern registration. That allows to use {@code ElementPatternsave} to put matched objects into processing contexts and then retrieve those objects inside extension implementation after the matching is complete.&lt;li&gt; &lt;ul&gt;" />
      <item value="prefix to look up" />
      <item value="look up prefix" />
      <item value="Slash" />
      <item value="last slash index" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="AFRIKAANS" value="5" />
        <entry key="CATALAN" value="1" />
        <entry key="CHINESE" value="876" />
        <entry key="DANISH" value="2" />
        <entry key="ENGLISH" value="831" />
        <entry key="FINNISH" value="2" />
        <entry key="FRENCH" value="3" />
        <entry key="HINDI" value="1" />
        <entry key="ICELANDIC" value="2" />
        <entry key="INDONESIAN" value="6" />
        <entry key="ITALIAN" value="1" />
        <entry key="LATIN" value="3" />
        <entry key="NORWEGIAN" value="4" />
        <entry key="POLISH" value="2" />
        <entry key="SUNDANESE" value="2" />
        <entry key="SWEDISH" value="5" />
        <entry key="TURKISH" value="1" />
        <entry key="UZBEK" value="6" />
        <entry key="WELSH" value="1" />
      </map>
    </option>
  </component>
  <component name="Translation.YoudaoSettings">
    <option name="DOMAIN" value="COMPUTERS" />
  </component>
</application>